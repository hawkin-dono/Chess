[
    {
        "label": "chess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "chess",
        "description": "chess",
        "detail": "chess",
        "documentation": {}
    },
    {
        "label": "Board",
        "importPath": "chess",
        "description": "chess",
        "isExtraImport": true,
        "detail": "chess",
        "documentation": {}
    },
    {
        "label": "Move",
        "importPath": "chess",
        "description": "chess",
        "isExtraImport": true,
        "detail": "chess",
        "documentation": {}
    },
    {
        "label": "scan_reversed",
        "importPath": "chess",
        "description": "chess",
        "isExtraImport": true,
        "detail": "chess",
        "documentation": {}
    },
    {
        "label": "Board",
        "importPath": "chess",
        "description": "chess",
        "isExtraImport": true,
        "detail": "chess",
        "documentation": {}
    },
    {
        "label": "Move",
        "importPath": "chess",
        "description": "chess",
        "isExtraImport": true,
        "detail": "chess",
        "documentation": {}
    },
    {
        "label": "PAWN",
        "importPath": "chess",
        "description": "chess",
        "isExtraImport": true,
        "detail": "chess",
        "documentation": {}
    },
    {
        "label": "QUEEN",
        "importPath": "chess",
        "description": "chess",
        "isExtraImport": true,
        "detail": "chess",
        "documentation": {}
    },
    {
        "label": "KING",
        "importPath": "chess",
        "description": "chess",
        "isExtraImport": true,
        "detail": "chess",
        "documentation": {}
    },
    {
        "label": "scan_reversed",
        "importPath": "chess",
        "description": "chess",
        "isExtraImport": true,
        "detail": "chess",
        "documentation": {}
    },
    {
        "label": "Board",
        "importPath": "chess",
        "description": "chess",
        "isExtraImport": true,
        "detail": "chess",
        "documentation": {}
    },
    {
        "label": "PAWN",
        "importPath": "chess",
        "description": "chess",
        "isExtraImport": true,
        "detail": "chess",
        "documentation": {}
    },
    {
        "label": "KNIGHT",
        "importPath": "chess",
        "description": "chess",
        "isExtraImport": true,
        "detail": "chess",
        "documentation": {}
    },
    {
        "label": "BISHOP",
        "importPath": "chess",
        "description": "chess",
        "isExtraImport": true,
        "detail": "chess",
        "documentation": {}
    },
    {
        "label": "ROOK",
        "importPath": "chess",
        "description": "chess",
        "isExtraImport": true,
        "detail": "chess",
        "documentation": {}
    },
    {
        "label": "QUEEN",
        "importPath": "chess",
        "description": "chess",
        "isExtraImport": true,
        "detail": "chess",
        "documentation": {}
    },
    {
        "label": "scan_reversed",
        "importPath": "chess",
        "description": "chess",
        "isExtraImport": true,
        "detail": "chess",
        "documentation": {}
    },
    {
        "label": "Board",
        "importPath": "chess",
        "description": "chess",
        "isExtraImport": true,
        "detail": "chess",
        "documentation": {}
    },
    {
        "label": "Move",
        "importPath": "chess",
        "description": "chess",
        "isExtraImport": true,
        "detail": "chess",
        "documentation": {}
    },
    {
        "label": "open_reader",
        "importPath": "chess.polyglot",
        "description": "chess.polyglot",
        "isExtraImport": true,
        "detail": "chess.polyglot",
        "documentation": {}
    },
    {
        "label": "zobrist_hash",
        "importPath": "chess.polyglot",
        "description": "chess.polyglot",
        "isExtraImport": true,
        "detail": "chess.polyglot",
        "documentation": {}
    },
    {
        "label": "open_tablebase",
        "importPath": "chess.syzygy",
        "description": "chess.syzygy",
        "isExtraImport": true,
        "detail": "chess.syzygy",
        "documentation": {}
    },
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Piece",
        "importPath": "GUI.piece",
        "description": "GUI.piece",
        "isExtraImport": true,
        "detail": "GUI.piece",
        "documentation": {}
    },
    {
        "label": "board",
        "importPath": "GUI.Board",
        "description": "GUI.Board",
        "isExtraImport": true,
        "detail": "GUI.Board",
        "documentation": {}
    },
    {
        "label": "cow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cow",
        "description": "cow",
        "detail": "cow",
        "documentation": {}
    },
    {
        "label": "start_screen",
        "importPath": "start_window",
        "description": "start_window",
        "isExtraImport": true,
        "detail": "start_window",
        "documentation": {}
    },
    {
        "label": "draw_board",
        "importPath": "GUI.board_graphics",
        "description": "GUI.board_graphics",
        "isExtraImport": true,
        "detail": "GUI.board_graphics",
        "documentation": {}
    },
    {
        "label": "quiesecence",
        "kind": 2,
        "importPath": "cow._engine",
        "description": "cow._engine",
        "peekOfCode": "def quiesecence(board : Board, depth: int, MAX_DEPTH: int, is_end_game: bool, alpha: float, beta: float, turn: int):\n    if (depth < MAX_DEPTH):\n        if board.is_checkmate(): return -turn * (END_GAME_SCORE + END_GAME_SCORE / (board.fullmove_number + 1))\n        if board.is_insufficient_material(): return 0\n        if not any(board.generate_legal_moves()): return 0\n        if board.is_fifty_moves(): return 0\n        if board.is_repetition(3): return 0\n    if depth == 0: return -turn * score(board, is_end_game)\n    moves = organize_moves_quiescence(board)\n    if not moves: return -turn * score(board, is_end_game)",
        "detail": "cow._engine",
        "documentation": {}
    },
    {
        "label": "minimax",
        "kind": 2,
        "importPath": "cow._engine",
        "description": "cow._engine",
        "peekOfCode": "def minimax(board : Board, depth: int, max_depth, cache: dict, is_end_game: bool, alpha: float = -float('inf'), beta: float = float('inf'), turn: int = 1):\n    if board.is_checkmate(): return None, -turn * (END_GAME_SCORE + END_GAME_SCORE / (board.fullmove_number + 1))\n    if board.is_insufficient_material(): return None, 0\n    if not any(board.generate_legal_moves()): return None, 0\n    if board.is_fifty_moves(): return None, 0\n    if board.is_repetition(3): return None, 0\n    cache_key = (zobrist_hash(board), (depth if depth >= 0 else 0), alpha, beta, turn)\n    if (depth <= max_depth - 3):\n        try: return cache[cache_key]\n        except: pass",
        "detail": "cow._engine",
        "documentation": {}
    },
    {
        "label": "cache",
        "kind": 5,
        "importPath": "cow._engine",
        "description": "cow._engine",
        "peekOfCode": "cache = {}\nis_end_game = False\nOPENING_BOOK = open_reader(\"cow/data/opening_book/3210elo.bin\")\ndef quiesecence(board : Board, depth: int, MAX_DEPTH: int, is_end_game: bool, alpha: float, beta: float, turn: int):\n    if (depth < MAX_DEPTH):\n        if board.is_checkmate(): return -turn * (END_GAME_SCORE + END_GAME_SCORE / (board.fullmove_number + 1))\n        if board.is_insufficient_material(): return 0\n        if not any(board.generate_legal_moves()): return 0\n        if board.is_fifty_moves(): return 0\n        if board.is_repetition(3): return 0",
        "detail": "cow._engine",
        "documentation": {}
    },
    {
        "label": "is_end_game",
        "kind": 5,
        "importPath": "cow._engine",
        "description": "cow._engine",
        "peekOfCode": "is_end_game = False\nOPENING_BOOK = open_reader(\"cow/data/opening_book/3210elo.bin\")\ndef quiesecence(board : Board, depth: int, MAX_DEPTH: int, is_end_game: bool, alpha: float, beta: float, turn: int):\n    if (depth < MAX_DEPTH):\n        if board.is_checkmate(): return -turn * (END_GAME_SCORE + END_GAME_SCORE / (board.fullmove_number + 1))\n        if board.is_insufficient_material(): return 0\n        if not any(board.generate_legal_moves()): return 0\n        if board.is_fifty_moves(): return 0\n        if board.is_repetition(3): return 0\n    if depth == 0: return -turn * score(board, is_end_game)",
        "detail": "cow._engine",
        "documentation": {}
    },
    {
        "label": "OPENING_BOOK",
        "kind": 5,
        "importPath": "cow._engine",
        "description": "cow._engine",
        "peekOfCode": "OPENING_BOOK = open_reader(\"cow/data/opening_book/3210elo.bin\")\ndef quiesecence(board : Board, depth: int, MAX_DEPTH: int, is_end_game: bool, alpha: float, beta: float, turn: int):\n    if (depth < MAX_DEPTH):\n        if board.is_checkmate(): return -turn * (END_GAME_SCORE + END_GAME_SCORE / (board.fullmove_number + 1))\n        if board.is_insufficient_material(): return 0\n        if not any(board.generate_legal_moves()): return 0\n        if board.is_fifty_moves(): return 0\n        if board.is_repetition(3): return 0\n    if depth == 0: return -turn * score(board, is_end_game)\n    moves = organize_moves_quiescence(board)",
        "detail": "cow._engine",
        "documentation": {}
    },
    {
        "label": "score",
        "kind": 2,
        "importPath": "cow._heuristic",
        "description": "cow._heuristic",
        "peekOfCode": "def score(board: Board, is_end_game: bool) -> float:\n    if is_end_game:\n        dtz = -EGTABLEBASE.get_dtz(board, 0)\n        if dtz > 0: return END_GAME_SCORE - dtz\n        if dtz < 0: return -END_GAME_SCORE - dtz\n    return calculate_score(board) \nPIECE_VALUES = [10, 30, 30, 50, 90, 1000]  # pawn, knight, bishop, rook, queen, king\ndef get_move_score(board: Board, move: Move) -> int:\n    if move.promotion == QUEEN: return 1\n    if board.is_capture(move): ",
        "detail": "cow._heuristic",
        "documentation": {}
    },
    {
        "label": "get_move_score",
        "kind": 2,
        "importPath": "cow._heuristic",
        "description": "cow._heuristic",
        "peekOfCode": "def get_move_score(board: Board, move: Move) -> int:\n    if move.promotion == QUEEN: return 1\n    if board.is_capture(move): \n        if board.is_en_passant(move): return 0\n        if not any(board.attackers(not board.turn, move.to_square)): return PIECE_VALUES[board.piece_type_at(move.to_square) - 1]\n        return PIECE_VALUES[board.piece_type_at(move.to_square) - 1] - PIECE_VALUES[board.piece_type_at(move.from_square) - 1]\n    return (-2 * PIECE_VALUES[KING - 1]) + get_move_static_score(board, move)\ndef organize_moves_quiescence(board: Board) -> list[Move]:\n    moves = [move for move in board.generate_legal_moves() if (get_move_score(board, move) > 0)]\n    moves.sort(key=lambda move: get_move_score(board, move), reverse=True)",
        "detail": "cow._heuristic",
        "documentation": {}
    },
    {
        "label": "organize_moves_quiescence",
        "kind": 2,
        "importPath": "cow._heuristic",
        "description": "cow._heuristic",
        "peekOfCode": "def organize_moves_quiescence(board: Board) -> list[Move]:\n    moves = [move for move in board.generate_legal_moves() if (get_move_score(board, move) > 0)]\n    moves.sort(key=lambda move: get_move_score(board, move), reverse=True)\n    return moves\ndef organize_moves(board: Board) -> list[Move]:\n    moves = list(board.generate_legal_moves())\n    moves.sort(key=lambda move: get_move_score(board, move), reverse=True)\n    return moves\ndef is_null_ok(board: Board) -> bool:\n    if board.is_check(): return False",
        "detail": "cow._heuristic",
        "documentation": {}
    },
    {
        "label": "organize_moves",
        "kind": 2,
        "importPath": "cow._heuristic",
        "description": "cow._heuristic",
        "peekOfCode": "def organize_moves(board: Board) -> list[Move]:\n    moves = list(board.generate_legal_moves())\n    moves.sort(key=lambda move: get_move_score(board, move), reverse=True)\n    return moves\ndef is_null_ok(board: Board) -> bool:\n    if board.is_check(): return False\n    if board.peek == Move.null(): return False\n    for square in scan_reversed(board.occupied):\n        piece = board.piece_at(square)\n        if (piece.color == board.turn) and (piece.piece_type not in [KING, PAWN]):",
        "detail": "cow._heuristic",
        "documentation": {}
    },
    {
        "label": "is_null_ok",
        "kind": 2,
        "importPath": "cow._heuristic",
        "description": "cow._heuristic",
        "peekOfCode": "def is_null_ok(board: Board) -> bool:\n    if board.is_check(): return False\n    if board.peek == Move.null(): return False\n    for square in scan_reversed(board.occupied):\n        piece = board.piece_at(square)\n        if (piece.color == board.turn) and (piece.piece_type not in [KING, PAWN]):\n            return True\n    return False",
        "detail": "cow._heuristic",
        "documentation": {}
    },
    {
        "label": "END_GAME_SCORE",
        "kind": 5,
        "importPath": "cow._heuristic",
        "description": "cow._heuristic",
        "peekOfCode": "END_GAME_SCORE = 1000000\nEGTABLEBASE = open_tablebase(\"cow/data/syzygy/3-4-5\")\ndef score(board: Board, is_end_game: bool) -> float:\n    if is_end_game:\n        dtz = -EGTABLEBASE.get_dtz(board, 0)\n        if dtz > 0: return END_GAME_SCORE - dtz\n        if dtz < 0: return -END_GAME_SCORE - dtz\n    return calculate_score(board) \nPIECE_VALUES = [10, 30, 30, 50, 90, 1000]  # pawn, knight, bishop, rook, queen, king\ndef get_move_score(board: Board, move: Move) -> int:",
        "detail": "cow._heuristic",
        "documentation": {}
    },
    {
        "label": "EGTABLEBASE",
        "kind": 5,
        "importPath": "cow._heuristic",
        "description": "cow._heuristic",
        "peekOfCode": "EGTABLEBASE = open_tablebase(\"cow/data/syzygy/3-4-5\")\ndef score(board: Board, is_end_game: bool) -> float:\n    if is_end_game:\n        dtz = -EGTABLEBASE.get_dtz(board, 0)\n        if dtz > 0: return END_GAME_SCORE - dtz\n        if dtz < 0: return -END_GAME_SCORE - dtz\n    return calculate_score(board) \nPIECE_VALUES = [10, 30, 30, 50, 90, 1000]  # pawn, knight, bishop, rook, queen, king\ndef get_move_score(board: Board, move: Move) -> int:\n    if move.promotion == QUEEN: return 1",
        "detail": "cow._heuristic",
        "documentation": {}
    },
    {
        "label": "PIECE_VALUES",
        "kind": 5,
        "importPath": "cow._heuristic",
        "description": "cow._heuristic",
        "peekOfCode": "PIECE_VALUES = [10, 30, 30, 50, 90, 1000]  # pawn, knight, bishop, rook, queen, king\ndef get_move_score(board: Board, move: Move) -> int:\n    if move.promotion == QUEEN: return 1\n    if board.is_capture(move): \n        if board.is_en_passant(move): return 0\n        if not any(board.attackers(not board.turn, move.to_square)): return PIECE_VALUES[board.piece_type_at(move.to_square) - 1]\n        return PIECE_VALUES[board.piece_type_at(move.to_square) - 1] - PIECE_VALUES[board.piece_type_at(move.from_square) - 1]\n    return (-2 * PIECE_VALUES[KING - 1]) + get_move_static_score(board, move)\ndef organize_moves_quiescence(board: Board) -> list[Move]:\n    moves = [move for move in board.generate_legal_moves() if (get_move_score(board, move) > 0)]",
        "detail": "cow._heuristic",
        "documentation": {}
    },
    {
        "label": "calculate_score",
        "kind": 2,
        "importPath": "cow._pesto_evaluation",
        "description": "cow._pesto_evaluation",
        "peekOfCode": "def calculate_score(board: Board) -> float:\n    mg_score, eg_score = 0, 0\n    for square in scan_reversed(board.occupied):\n        piece = board.piece_at(square)\n        if piece.color:\n            mg_score += MG_PESTO[piece.piece_type - 1][square ^ 56] + MG_PIECE_VALUES[piece.piece_type - 1]\n            eg_score += EG_PESTO[piece.piece_type - 1][square ^ 56] + EG_PIECE_VALUES[piece.piece_type - 1]\n        else:\n            mg_score -= MG_PESTO[piece.piece_type - 1][square] + MG_PIECE_VALUES[piece.piece_type - 1]\n            eg_score -= EG_PESTO[piece.piece_type - 1][square] + EG_PIECE_VALUES[piece.piece_type - 1]",
        "detail": "cow._pesto_evaluation",
        "documentation": {}
    },
    {
        "label": "get_phase",
        "kind": 2,
        "importPath": "cow._pesto_evaluation",
        "description": "cow._pesto_evaluation",
        "peekOfCode": "def get_phase(board: Board) -> float:\n    phase = TOTAL_PHASE - sum(PHASE_VALUES[board.piece_type_at(square) - 1] for square in scan_reversed(board.occupied))\n    return (phase * 256 + (TOTAL_PHASE / 2)) / TOTAL_PHASE",
        "detail": "cow._pesto_evaluation",
        "documentation": {}
    },
    {
        "label": "MG_PIECE_VALUES",
        "kind": 5,
        "importPath": "cow._pesto_evaluation",
        "description": "cow._pesto_evaluation",
        "peekOfCode": "MG_PIECE_VALUES = [82, 337, 365, 477, 1025, 24000]  # pawn, knight, bishop, rook, queen, king\nEG_PIECE_VALUES = [94, 281, 297, 512, 936, 24000]  # pawn, knight, bishop, rook, queen, king\nPAWN_MG = [0,   0,   0,   0,   0,   0,  0,   0,\n          98, 134,  61,  95,  68, 126, 34, -11,\n          -6,   7,  26,  31,  65,  56, 25, -20,\n         -14,  13,   6,  21,  23,  12, 17, -23,\n         -27,  -2,  -5,  12,  17,   6, 10, -25,\n         -26,  -4,  -4, -10,   3,   3, 33, -12,\n         -35,  -1, -20, -23, -15,  24, 38, -22,\n           0,   0,   0,   0,   0,   0,  0,   0,]",
        "detail": "cow._pesto_evaluation",
        "documentation": {}
    },
    {
        "label": "EG_PIECE_VALUES",
        "kind": 5,
        "importPath": "cow._pesto_evaluation",
        "description": "cow._pesto_evaluation",
        "peekOfCode": "EG_PIECE_VALUES = [94, 281, 297, 512, 936, 24000]  # pawn, knight, bishop, rook, queen, king\nPAWN_MG = [0,   0,   0,   0,   0,   0,  0,   0,\n          98, 134,  61,  95,  68, 126, 34, -11,\n          -6,   7,  26,  31,  65,  56, 25, -20,\n         -14,  13,   6,  21,  23,  12, 17, -23,\n         -27,  -2,  -5,  12,  17,   6, 10, -25,\n         -26,  -4,  -4, -10,   3,   3, 33, -12,\n         -35,  -1, -20, -23, -15,  24, 38, -22,\n           0,   0,   0,   0,   0,   0,  0,   0,]\nPAWN_EG = [0,   0,   0,   0,   0,   0,   0,   0,",
        "detail": "cow._pesto_evaluation",
        "documentation": {}
    },
    {
        "label": "PAWN_MG",
        "kind": 5,
        "importPath": "cow._pesto_evaluation",
        "description": "cow._pesto_evaluation",
        "peekOfCode": "PAWN_MG = [0,   0,   0,   0,   0,   0,  0,   0,\n          98, 134,  61,  95,  68, 126, 34, -11,\n          -6,   7,  26,  31,  65,  56, 25, -20,\n         -14,  13,   6,  21,  23,  12, 17, -23,\n         -27,  -2,  -5,  12,  17,   6, 10, -25,\n         -26,  -4,  -4, -10,   3,   3, 33, -12,\n         -35,  -1, -20, -23, -15,  24, 38, -22,\n           0,   0,   0,   0,   0,   0,  0,   0,]\nPAWN_EG = [0,   0,   0,   0,   0,   0,   0,   0,\n         178, 173, 158, 134, 147, 132, 165, 187,",
        "detail": "cow._pesto_evaluation",
        "documentation": {}
    },
    {
        "label": "PAWN_EG",
        "kind": 5,
        "importPath": "cow._pesto_evaluation",
        "description": "cow._pesto_evaluation",
        "peekOfCode": "PAWN_EG = [0,   0,   0,   0,   0,   0,   0,   0,\n         178, 173, 158, 134, 147, 132, 165, 187,\n          94, 100,  85,  67,  56,  53,  82,  84,\n          32,  24,  13,   5,  -2,   4,  17,  17,\n          13,   9,  -3,  -7,  -7,  -8,   3,  -1,\n           4,   7,  -6,   1,   0,  -5,  -1,  -8,\n          13,   8,   8,  10,  13,   0,   2,  -7,\n           0,   0,   0,   0,   0,   0,   0,   0,]\nKNIGHT_MG = [-167, -89, -34, -49,  61, -97, -15, -107,\n              -73, -41,  72,  36,  23,  62,   7,  -17,",
        "detail": "cow._pesto_evaluation",
        "documentation": {}
    },
    {
        "label": "KNIGHT_MG",
        "kind": 5,
        "importPath": "cow._pesto_evaluation",
        "description": "cow._pesto_evaluation",
        "peekOfCode": "KNIGHT_MG = [-167, -89, -34, -49,  61, -97, -15, -107,\n              -73, -41,  72,  36,  23,  62,   7,  -17,\n              -47,  60,  37,  65,  84, 129,  73,   44,\n               -9,  17,  19,  53,  37,  69,  18,   22,\n              -13,   4,  16,  13,  28,  19,  21,   -8,\n              -23,  -9,  12,  10,  19,  17,  25,  -16,\n              -29, -53, -12,  -3,  -1,  18, -14,  -19,\n             -105, -21, -58, -33, -17, -28, -19,  -23,]\nKNIGHT_EG = [-58, -38, -13, -28, -31, -27, -63, -99,\n             -25,  -8, -25,  -2,  -9, -25, -24, -52,",
        "detail": "cow._pesto_evaluation",
        "documentation": {}
    },
    {
        "label": "KNIGHT_EG",
        "kind": 5,
        "importPath": "cow._pesto_evaluation",
        "description": "cow._pesto_evaluation",
        "peekOfCode": "KNIGHT_EG = [-58, -38, -13, -28, -31, -27, -63, -99,\n             -25,  -8, -25,  -2,  -9, -25, -24, -52,\n             -24, -20,  10,   9,  -1,  -9, -19, -41,\n             -17,   3,  22,  22,  22,  11,   8, -18,\n             -18,  -6,  16,  25,  16,  17,   4, -18,\n             -23,  -3,  -1,  15,  10,  -3, -20, -22,\n             -42, -20, -10,  -5,  -2, -20, -23, -44,\n             -29, -51, -23, -15, -22, -18, -50, -64,]\nBISHOP_MG = [-29,   4, -82, -37, -25, -42,   7,  -8,\n             -26,  16, -18, -13,  30,  59,  18, -47,",
        "detail": "cow._pesto_evaluation",
        "documentation": {}
    },
    {
        "label": "BISHOP_MG",
        "kind": 5,
        "importPath": "cow._pesto_evaluation",
        "description": "cow._pesto_evaluation",
        "peekOfCode": "BISHOP_MG = [-29,   4, -82, -37, -25, -42,   7,  -8,\n             -26,  16, -18, -13,  30,  59,  18, -47,\n             -16,  37,  43,  40,  35,  50,  37,  -2,\n              -4,   5,  19,  50,  37,  37,   7,  -2,\n              -6,  13,  13,  26,  34,  12,  10,   4,\n               0,  15,  15,  15,  14,  27,  18,  10,\n               4,  15,  16,   0,   7,  21,  33,   1,\n             -33,  -3, -14, -21, -13, -12, -39, -21,]\nBISHOP_EG = [-14, -21, -11,  -8, -7,  -9, -17, -24,\n              -8,  -4,   7, -12, -3, -13,  -4, -14,",
        "detail": "cow._pesto_evaluation",
        "documentation": {}
    },
    {
        "label": "BISHOP_EG",
        "kind": 5,
        "importPath": "cow._pesto_evaluation",
        "description": "cow._pesto_evaluation",
        "peekOfCode": "BISHOP_EG = [-14, -21, -11,  -8, -7,  -9, -17, -24,\n              -8,  -4,   7, -12, -3, -13,  -4, -14,\n               2,  -8,   0,  -1, -2,   6,   0,   4,\n              -3,   9,  12,   9, 14,  10,   3,   2,\n              -6,   3,  13,  19,  7,  10,  -3,  -9,\n             -12,  -3,   8,  10, 13,   3,  -7, -15,\n             -14, -18,  -7,  -1,  4,  -9, -15, -27,\n             -23,  -9, -23,  -5, -9, -16,  -5, -17,]\nROOK_MG = [32,  42,  32,  51, 63,  9,  31,  43,\n           27,  32,  58,  62, 80, 67,  26,  44,",
        "detail": "cow._pesto_evaluation",
        "documentation": {}
    },
    {
        "label": "ROOK_MG",
        "kind": 5,
        "importPath": "cow._pesto_evaluation",
        "description": "cow._pesto_evaluation",
        "peekOfCode": "ROOK_MG = [32,  42,  32,  51, 63,  9,  31,  43,\n           27,  32,  58,  62, 80, 67,  26,  44,\n           -5,  19,  26,  36, 17, 45,  61,  16,\n          -24, -11,   7,  26, 24, 35,  -8, -20,\n          -36, -26, -12,  -1,  9, -7,   6, -23,\n          -45, -25, -16, -17,  3,  0,  -5, -33,\n          -44, -16, -20,  -9, -1, 11,  -6, -71,\n          -19, -13,   1,  17, 16,  7, -37, -26,]\nROOK_EG = [13, 10, 18, 15, 12,  12,   8,   5,\n           11, 13, 13, 11, -3,   3,   8,   3,",
        "detail": "cow._pesto_evaluation",
        "documentation": {}
    },
    {
        "label": "ROOK_EG",
        "kind": 5,
        "importPath": "cow._pesto_evaluation",
        "description": "cow._pesto_evaluation",
        "peekOfCode": "ROOK_EG = [13, 10, 18, 15, 12,  12,   8,   5,\n           11, 13, 13, 11, -3,   3,   8,   3,\n            7,  7,  7,  5,  4,  -3,  -5,  -3,\n            4,  3, 13,  1,  2,   1,  -1,   2,\n            3,  5,  8,  4, -5,  -6,  -8, -11,\n           -4,  0, -5, -1, -7, -12,  -8, -16,\n           -6, -6,  0,  2, -9,  -9, -11,  -3,\n           -9,  2,  3, -1, -5, -13,   4, -20,]\nQUEEN_MG = [-28,   0,  29,  12,  59,  44,  43,  45,\n            -24, -39,  -5,   1, -16,  57,  28,  54,",
        "detail": "cow._pesto_evaluation",
        "documentation": {}
    },
    {
        "label": "QUEEN_MG",
        "kind": 5,
        "importPath": "cow._pesto_evaluation",
        "description": "cow._pesto_evaluation",
        "peekOfCode": "QUEEN_MG = [-28,   0,  29,  12,  59,  44,  43,  45,\n            -24, -39,  -5,   1, -16,  57,  28,  54,\n            -13, -17,   7,   8,  29,  56,  47,  57,\n            -27, -27, -16, -16,  -1,  17,  -2,   1,\n             -9, -26,  -9, -10,  -2,  -4,   3,  -3,\n            -14,   2, -11,  -2,  -5,   2,  14,   5,\n            -35,  -8,  11,   2,   8,  15,  -3,   1,\n             -1, -18,  -9,  10, -15, -25, -31, -50,]\nQUEEN_EG = [-9,  22,  22,  27,  27,  19,  10,  20,\n           -17,  20,  32,  41,  58,  25,  30,   0,",
        "detail": "cow._pesto_evaluation",
        "documentation": {}
    },
    {
        "label": "QUEEN_EG",
        "kind": 5,
        "importPath": "cow._pesto_evaluation",
        "description": "cow._pesto_evaluation",
        "peekOfCode": "QUEEN_EG = [-9,  22,  22,  27,  27,  19,  10,  20,\n           -17,  20,  32,  41,  58,  25,  30,   0,\n           -20,   6,   9,  49,  47,  35,  19,   9,\n             3,  22,  24,  45,  57,  40,  57,  36,\n           -18,  28,  19,  47,  31,  34,  39,  23,\n           -16, -27,  15,   6,   9,  17,  10,   5,\n           -22, -23, -30, -16, -16, -23, -36, -32,\n           -33, -28, -22, -43,  -5, -32, -20, -41,]\nKING_MG = [-65,  23,  16, -15, -56, -34,   2,  13,\n            29,  -1, -20,  -7,  -8,  -4, -38, -29,",
        "detail": "cow._pesto_evaluation",
        "documentation": {}
    },
    {
        "label": "KING_MG",
        "kind": 5,
        "importPath": "cow._pesto_evaluation",
        "description": "cow._pesto_evaluation",
        "peekOfCode": "KING_MG = [-65,  23,  16, -15, -56, -34,   2,  13,\n            29,  -1, -20,  -7,  -8,  -4, -38, -29,\n            -9,  24,   2, -16, -20,   6,  22, -22,\n           -17, -20, -12, -27, -30, -25, -14, -36,\n           -49,  -1, -27, -39, -46, -44, -33, -51,\n           -14, -14, -22, -46, -44, -30, -15, -27,\n             1,   7,  -8, -64, -43, -16,   9,   8,\n           -15,  36,  12, -54,   8, -28,  24,  14,]\nKING_EG = [-74, -35, -18, -18, -11,  15,   4, -17,\n           -12,  17,  14,  17,  17,  38,  23,  11,",
        "detail": "cow._pesto_evaluation",
        "documentation": {}
    },
    {
        "label": "KING_EG",
        "kind": 5,
        "importPath": "cow._pesto_evaluation",
        "description": "cow._pesto_evaluation",
        "peekOfCode": "KING_EG = [-74, -35, -18, -18, -11,  15,   4, -17,\n           -12,  17,  14,  17,  17,  38,  23,  11,\n            10,  17,  23,  15,  20,  45,  44,  13,\n            -8,  22,  24,  27,  26,  33,  26,   3,\n           -18,  -4,  21,  24,  27,  23,   9, -11,\n           -19,  -3,  11,  21,  23,  16,   7,  -9,\n           -27, -11,   4,  13,  14,   4,  -5, -17,\n           -53, -34, -21, -11, -28, -14, -24, -43,]\nMG_PESTO = [PAWN_MG, KNIGHT_MG, BISHOP_MG, ROOK_MG, QUEEN_MG, KING_MG]\nEG_PESTO = [PAWN_EG, KNIGHT_EG, BISHOP_EG, ROOK_EG, QUEEN_EG, KING_EG]",
        "detail": "cow._pesto_evaluation",
        "documentation": {}
    },
    {
        "label": "MG_PESTO",
        "kind": 5,
        "importPath": "cow._pesto_evaluation",
        "description": "cow._pesto_evaluation",
        "peekOfCode": "MG_PESTO = [PAWN_MG, KNIGHT_MG, BISHOP_MG, ROOK_MG, QUEEN_MG, KING_MG]\nEG_PESTO = [PAWN_EG, KNIGHT_EG, BISHOP_EG, ROOK_EG, QUEEN_EG, KING_EG]\ndef calculate_score(board: Board) -> float:\n    mg_score, eg_score = 0, 0\n    for square in scan_reversed(board.occupied):\n        piece = board.piece_at(square)\n        if piece.color:\n            mg_score += MG_PESTO[piece.piece_type - 1][square ^ 56] + MG_PIECE_VALUES[piece.piece_type - 1]\n            eg_score += EG_PESTO[piece.piece_type - 1][square ^ 56] + EG_PIECE_VALUES[piece.piece_type - 1]\n        else:",
        "detail": "cow._pesto_evaluation",
        "documentation": {}
    },
    {
        "label": "EG_PESTO",
        "kind": 5,
        "importPath": "cow._pesto_evaluation",
        "description": "cow._pesto_evaluation",
        "peekOfCode": "EG_PESTO = [PAWN_EG, KNIGHT_EG, BISHOP_EG, ROOK_EG, QUEEN_EG, KING_EG]\ndef calculate_score(board: Board) -> float:\n    mg_score, eg_score = 0, 0\n    for square in scan_reversed(board.occupied):\n        piece = board.piece_at(square)\n        if piece.color:\n            mg_score += MG_PESTO[piece.piece_type - 1][square ^ 56] + MG_PIECE_VALUES[piece.piece_type - 1]\n            eg_score += EG_PESTO[piece.piece_type - 1][square ^ 56] + EG_PIECE_VALUES[piece.piece_type - 1]\n        else:\n            mg_score -= MG_PESTO[piece.piece_type - 1][square] + MG_PIECE_VALUES[piece.piece_type - 1]",
        "detail": "cow._pesto_evaluation",
        "documentation": {}
    },
    {
        "label": "PHASE_VALUES",
        "kind": 5,
        "importPath": "cow._pesto_evaluation",
        "description": "cow._pesto_evaluation",
        "peekOfCode": "PHASE_VALUES = [0, 1, 1, 2, 4, 0]\nTOTAL_PHASE = (PHASE_VALUES[PAWN - 1] * 16 + PHASE_VALUES[KNIGHT - 1] * 4 + \n               PHASE_VALUES[BISHOP - 1] * 4 + PHASE_VALUES[ROOK - 1] * 4 + PHASE_VALUES[QUEEN - 1] * 2)\ndef get_phase(board: Board) -> float:\n    phase = TOTAL_PHASE - sum(PHASE_VALUES[board.piece_type_at(square) - 1] for square in scan_reversed(board.occupied))\n    return (phase * 256 + (TOTAL_PHASE / 2)) / TOTAL_PHASE",
        "detail": "cow._pesto_evaluation",
        "documentation": {}
    },
    {
        "label": "TOTAL_PHASE",
        "kind": 5,
        "importPath": "cow._pesto_evaluation",
        "description": "cow._pesto_evaluation",
        "peekOfCode": "TOTAL_PHASE = (PHASE_VALUES[PAWN - 1] * 16 + PHASE_VALUES[KNIGHT - 1] * 4 + \n               PHASE_VALUES[BISHOP - 1] * 4 + PHASE_VALUES[ROOK - 1] * 4 + PHASE_VALUES[QUEEN - 1] * 2)\ndef get_phase(board: Board) -> float:\n    phase = TOTAL_PHASE - sum(PHASE_VALUES[board.piece_type_at(square) - 1] for square in scan_reversed(board.occupied))\n    return (phase * 256 + (TOTAL_PHASE / 2)) / TOTAL_PHASE",
        "detail": "cow._pesto_evaluation",
        "documentation": {}
    },
    {
        "label": "get_move_static_score",
        "kind": 2,
        "importPath": "cow._piece_evaluation",
        "description": "cow._piece_evaluation",
        "peekOfCode": "def get_move_static_score(board: Board, move: Move) -> int:\n    piece = board.piece_at(move.from_square)\n    if piece.color:\n        return PIECES[piece.piece_type - 1][move.to_square] - PIECES[piece.piece_type - 1][move.from_square]\n    return PIECES[piece.piece_type - 1][move.to_square ^ 56] - PIECES[piece.piece_type - 1][move.from_square ^ 56]",
        "detail": "cow._piece_evaluation",
        "documentation": {}
    },
    {
        "label": "KNIGHT_TABLE",
        "kind": 5,
        "importPath": "cow._piece_evaluation",
        "description": "cow._piece_evaluation",
        "peekOfCode": "KNIGHT_TABLE = [-50,-40,-30,-30,-30,-30,-40,-50,\n                -40,-20,  0,  0,  0,  0,-20,-40,\n                -30,  0, 10, 15, 15, 10,  0,-30,\n                -30,  5, 15, 20, 20, 15,  5,-30,\n                -30,  0, 15, 20, 20, 15,  0,-30,\n                -30,  5, 10, 15, 15, 10,  5,-30,\n                -40,-20,  0,  5,  5,  0,-20,-40,\n                -50,-40,-30,-30,-30,-30,-40,-50,]\nBISHOP_TABLE = [-20,-10,-10,-10,-10,-10,-10,-20,\n                -10,  0,  0,  0,  0,  0,  0,-10,",
        "detail": "cow._piece_evaluation",
        "documentation": {}
    },
    {
        "label": "BISHOP_TABLE",
        "kind": 5,
        "importPath": "cow._piece_evaluation",
        "description": "cow._piece_evaluation",
        "peekOfCode": "BISHOP_TABLE = [-20,-10,-10,-10,-10,-10,-10,-20,\n                -10,  0,  0,  0,  0,  0,  0,-10,\n                -10,  0,  5, 10, 10,  5,  0,-10,\n                -10,  5,  5, 10, 10,  5,  5,-10,\n                -10,  0, 10, 10, 10, 10,  0,-10,\n                -10, 10, 10, 10, 10, 10, 10,-10,\n                -10,  5,  0,  0,  0,  0,  5,-10,\n                -20,-10,-10,-10,-10,-10,-10,-20,]\nROOK_TABLE =   [0,  0,  0,  0,  0,  0,  0,  0,\n                5, 10, 10, 10, 10, 10, 10,  5,",
        "detail": "cow._piece_evaluation",
        "documentation": {}
    },
    {
        "label": "ROOK_TABLE",
        "kind": 5,
        "importPath": "cow._piece_evaluation",
        "description": "cow._piece_evaluation",
        "peekOfCode": "ROOK_TABLE =   [0,  0,  0,  0,  0,  0,  0,  0,\n                5, 10, 10, 10, 10, 10, 10,  5,\n               -5,  0,  0,  0,  0,  0,  0, -5,\n               -5,  0,  0,  0,  0,  0,  0, -5,\n               -5,  0,  0,  0,  0,  0,  0, -5,\n               -5,  0,  0,  0,  0,  0,  0, -5,\n               -5,  0,  0,  0,  0,  0,  0, -5,\n                0,  0,  0,  5,  5,  0,  0,  0]\nQUEEN_TABLE = [-20,-10,-10, -5, -5,-10,-10,-20,\n               -10,  0,  0,  0,  0,  0,  0,-10,",
        "detail": "cow._piece_evaluation",
        "documentation": {}
    },
    {
        "label": "QUEEN_TABLE",
        "kind": 5,
        "importPath": "cow._piece_evaluation",
        "description": "cow._piece_evaluation",
        "peekOfCode": "QUEEN_TABLE = [-20,-10,-10, -5, -5,-10,-10,-20,\n               -10,  0,  0,  0,  0,  0,  0,-10,\n               -10,  0,  5,  5,  5,  5,  0,-10,\n                -5,  0,  5,  5,  5,  5,  0, -5,\n                 0,  0,  5,  5,  5,  5,  0, -5,\n               -10,  5,  5,  5,  5,  5,  0,-10,\n               -10,  0,  5,  0,  0,  0,  0,-10,\n               -20,-10,-10, -5, -5,-10,-10,-20]\nPAWN_TABLE =  [0,  0,  0,  0,  0,  0,  0,  0,\n              50, 50, 50, 50, 50, 50, 50, 50,",
        "detail": "cow._piece_evaluation",
        "documentation": {}
    },
    {
        "label": "PAWN_TABLE",
        "kind": 5,
        "importPath": "cow._piece_evaluation",
        "description": "cow._piece_evaluation",
        "peekOfCode": "PAWN_TABLE =  [0,  0,  0,  0,  0,  0,  0,  0,\n              50, 50, 50, 50, 50, 50, 50, 50,\n              10, 10, 20, 30, 30, 20, 10, 10,\n               5,  5, 10, 25, 25, 10,  5,  5,\n               0,  0,  0, 20, 20,  0,  0,  0,\n               5, -5,-10,  0,  0,-10, -5,  5,\n               5, 10, 10,-20,-20, 10, 10,  5,\n               0,  0,  0,  0,  0,  0,  0,  0]\nKING_TABLE = [-50,-40,-30,-20,-20,-30,-40,-50,\n              -30,-20,-10,  0,  0,-10,-20,-30,",
        "detail": "cow._piece_evaluation",
        "documentation": {}
    },
    {
        "label": "KING_TABLE",
        "kind": 5,
        "importPath": "cow._piece_evaluation",
        "description": "cow._piece_evaluation",
        "peekOfCode": "KING_TABLE = [-50,-40,-30,-20,-20,-30,-40,-50,\n              -30,-20,-10,  0,  0,-10,-20,-30,\n              -30,-10, 10, 15, 15, 10,-10,-30,\n              -30,-10, 15, 20, 20, 15,-10,-30,\n              -30,-10, 15, 20, 20, 15,-10,-30,\n              -30,-10, 10, 10, 10, 10,-10,-30,\n               15, 15,  0,  0,  0,  0, 15, 15,\n               15, 20, 10,  0,  0, 10, 20, 15]\nPIECES = [PAWN_TABLE, KNIGHT_TABLE, BISHOP_TABLE, ROOK_TABLE, QUEEN_TABLE, KING_TABLE]\ndef get_move_static_score(board: Board, move: Move) -> int:",
        "detail": "cow._piece_evaluation",
        "documentation": {}
    },
    {
        "label": "PIECES",
        "kind": 5,
        "importPath": "cow._piece_evaluation",
        "description": "cow._piece_evaluation",
        "peekOfCode": "PIECES = [PAWN_TABLE, KNIGHT_TABLE, BISHOP_TABLE, ROOK_TABLE, QUEEN_TABLE, KING_TABLE]\ndef get_move_static_score(board: Board, move: Move) -> int:\n    piece = board.piece_at(move.from_square)\n    if piece.color:\n        return PIECES[piece.piece_type - 1][move.to_square] - PIECES[piece.piece_type - 1][move.from_square]\n    return PIECES[piece.piece_type - 1][move.to_square ^ 56] - PIECES[piece.piece_type - 1][move.from_square ^ 56]",
        "detail": "cow._piece_evaluation",
        "documentation": {}
    },
    {
        "label": "board",
        "kind": 6,
        "importPath": "GUI.Board",
        "description": "GUI.Board",
        "peekOfCode": "class board:\n    def __init__(self, width, height, player):\n        self.width = width\n        self.height = height\n        self.square_height = height // 8\n        self.square_width = width // 8\n        self.selected_piece = None\n        self.promotion = None\n        self.list_valid_moves = []\n        self.board = chess.Board() ",
        "detail": "GUI.Board",
        "documentation": {}
    },
    {
        "label": "unicode_to_algebraic",
        "kind": 5,
        "importPath": "GUI.Board",
        "description": "GUI.Board",
        "peekOfCode": "unicode_to_algebraic = {\n    '♚': 'K', '♛': 'Q', '♜': 'R', '♝': 'B', '♞': 'N', '♟': 'P',\n    '♔': 'k', '♕': 'q', '♖': 'r', '♗': 'b', '♘': 'n', '♙': 'p'\n}\npromotion_code = ['q', 'r', 'b', 'n']\npromotion_list = ['queen', 'rook', 'bishop', 'knight']\nclass board:\n    def __init__(self, width, height, player):\n        self.width = width\n        self.height = height",
        "detail": "GUI.Board",
        "documentation": {}
    },
    {
        "label": "promotion_code",
        "kind": 5,
        "importPath": "GUI.Board",
        "description": "GUI.Board",
        "peekOfCode": "promotion_code = ['q', 'r', 'b', 'n']\npromotion_list = ['queen', 'rook', 'bishop', 'knight']\nclass board:\n    def __init__(self, width, height, player):\n        self.width = width\n        self.height = height\n        self.square_height = height // 8\n        self.square_width = width // 8\n        self.selected_piece = None\n        self.promotion = None",
        "detail": "GUI.Board",
        "documentation": {}
    },
    {
        "label": "promotion_list",
        "kind": 5,
        "importPath": "GUI.Board",
        "description": "GUI.Board",
        "peekOfCode": "promotion_list = ['queen', 'rook', 'bishop', 'knight']\nclass board:\n    def __init__(self, width, height, player):\n        self.width = width\n        self.height = height\n        self.square_height = height // 8\n        self.square_width = width // 8\n        self.selected_piece = None\n        self.promotion = None\n        self.list_valid_moves = []",
        "detail": "GUI.Board",
        "documentation": {}
    },
    {
        "label": "draw_board",
        "kind": 2,
        "importPath": "GUI.board_graphics",
        "description": "GUI.board_graphics",
        "peekOfCode": "def draw_board(board, screen):\n    board.update()\n    background_img = pygame.image.load('data/imgs/background-main.jpg')\n    background_img = pygame.transform.scale(background_img, (screen.get_width() - board.width, screen.get_height()))\n    # draw background\n    screen.blit(background_img, (board.width, 0))\n    for x in range(8):\n        for y in range(8):\n            loc = (x * (board.square_width), y * (board.square_height))\n            color = 'light' if (x + y) % 2 == 1 else 'dark'",
        "detail": "GUI.board_graphics",
        "documentation": {}
    },
    {
        "label": "add_text",
        "kind": 2,
        "importPath": "GUI.board_graphics",
        "description": "GUI.board_graphics",
        "peekOfCode": "def add_text(screen, pos, text, color=(0, 0, 0), backgroundColor=(255, 255, 255), button=False):\n    title = pygame.font.SysFont('Arial', 25).render(text, True, color)\n    temp_surface = pygame.Surface(title.get_size())\n    temp_surface.fill(backgroundColor)\n    temp_surface.blit(title, (0, 0))\n    screen.blit(temp_surface, (pos[0], pos[1]))\ndef draw_promotion(board, screen):\n    team = 'white' if board.board.turn == chess.WHITE else 'black'\n    for i in range(4):\n        loc = board.square_height * i",
        "detail": "GUI.board_graphics",
        "documentation": {}
    },
    {
        "label": "draw_promotion",
        "kind": 2,
        "importPath": "GUI.board_graphics",
        "description": "GUI.board_graphics",
        "peekOfCode": "def draw_promotion(board, screen):\n    team = 'white' if board.board.turn == chess.WHITE else 'black'\n    for i in range(4):\n        loc = board.square_height * i\n        draw_color = (0, 0, 0)\n        rect = pygame.Rect(600 + 20, loc + i * 2, board.square_width, board.square_height)\n        pygame.draw.rect(screen, draw_color, rect, 2)\n        img_path = f'./data/imgs/{team}-{promotion_list[i]}.png'\n        dude_path = os.path.join(img_path)\n        image = pygame.image.load(dude_path)",
        "detail": "GUI.board_graphics",
        "documentation": {}
    },
    {
        "label": "unicode_to_algebraic",
        "kind": 5,
        "importPath": "GUI.board_graphics",
        "description": "GUI.board_graphics",
        "peekOfCode": "unicode_to_algebraic = {\n    '♚': 'K', '♛': 'Q', '♜': 'R', '♝': 'B', '♞': 'N', '♟': 'P',\n    '♔': 'k', '♕': 'q', '♖': 'r', '♗': 'b', '♘': 'n', '♙': 'p'\n}\npromotion_list = ['queen', 'rook', 'bishop', 'knight']\ndef draw_board(board, screen):\n    board.update()\n    background_img = pygame.image.load('data/imgs/background-main.jpg')\n    background_img = pygame.transform.scale(background_img, (screen.get_width() - board.width, screen.get_height()))\n    # draw background",
        "detail": "GUI.board_graphics",
        "documentation": {}
    },
    {
        "label": "promotion_list",
        "kind": 5,
        "importPath": "GUI.board_graphics",
        "description": "GUI.board_graphics",
        "peekOfCode": "promotion_list = ['queen', 'rook', 'bishop', 'knight']\ndef draw_board(board, screen):\n    board.update()\n    background_img = pygame.image.load('data/imgs/background-main.jpg')\n    background_img = pygame.transform.scale(background_img, (screen.get_width() - board.width, screen.get_height()))\n    # draw background\n    screen.blit(background_img, (board.width, 0))\n    for x in range(8):\n        for y in range(8):\n            loc = (x * (board.square_width), y * (board.square_height))",
        "detail": "GUI.board_graphics",
        "documentation": {}
    },
    {
        "label": "Piece",
        "kind": 6,
        "importPath": "GUI.piece",
        "description": "GUI.piece",
        "peekOfCode": "class Piece(pygame.sprite.Sprite):\n    def __init__(self, piece_code, team_code, square_width, square_height):\n        super().__init__()\n        self.piece_code = piece_code\n        self.team_code = team_code\n        self.image = self.load_image(piece_code, team_code, square_width, square_height)\n        self.rect = self.image.get_rect()\n    def load_image(self, piece_code, team_code, square_width, square_height):\n        piece_str = self.get_piece_string(piece_code)\n        img_path = f'./data/imgs/{team_code}-{piece_str}.png'",
        "detail": "GUI.piece",
        "documentation": {}
    },
    {
        "label": "draw_start_screen",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def draw_start_screen(screen):\n    #screen.blit(background, (0, 0))\n    screen.fill('white')\n    main_start_screen.draw_screen(screen)\n    pygame.display.update()\nwhile True:\n    mx, my = pygame.mouse.get_pos()\n    for event in pygame.event.get(): \n        if event.type == pygame.QUIT:\n            exit()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def draw(screen):\n    screen.fill('white')\n    draw_board(main_board, screen)\n    pygame.display.update()\nbest_move = -1\nwhile True:\n    mx, my = pygame.mouse.get_pos()\n    for event in pygame.event.get(): \n        if event.type == pygame.QUIT:\n            exit()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "window_size",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "window_size = (800, 600)\nboard_size = (600, 600)\nteam = [-1, -1]\n# start screen\nscreen = pygame.display.set_mode(window_size)\nmain_start_screen = start_screen(window_size)\ndef draw_start_screen(screen):\n    #screen.blit(background, (0, 0))\n    screen.fill('white')\n    main_start_screen.draw_screen(screen)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "board_size",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "board_size = (600, 600)\nteam = [-1, -1]\n# start screen\nscreen = pygame.display.set_mode(window_size)\nmain_start_screen = start_screen(window_size)\ndef draw_start_screen(screen):\n    #screen.blit(background, (0, 0))\n    screen.fill('white')\n    main_start_screen.draw_screen(screen)\n    pygame.display.update()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "team",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "team = [-1, -1]\n# start screen\nscreen = pygame.display.set_mode(window_size)\nmain_start_screen = start_screen(window_size)\ndef draw_start_screen(screen):\n    #screen.blit(background, (0, 0))\n    screen.fill('white')\n    main_start_screen.draw_screen(screen)\n    pygame.display.update()\nwhile True:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "screen = pygame.display.set_mode(window_size)\nmain_start_screen = start_screen(window_size)\ndef draw_start_screen(screen):\n    #screen.blit(background, (0, 0))\n    screen.fill('white')\n    main_start_screen.draw_screen(screen)\n    pygame.display.update()\nwhile True:\n    mx, my = pygame.mouse.get_pos()\n    for event in pygame.event.get(): ",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "main_start_screen",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "main_start_screen = start_screen(window_size)\ndef draw_start_screen(screen):\n    #screen.blit(background, (0, 0))\n    screen.fill('white')\n    main_start_screen.draw_screen(screen)\n    pygame.display.update()\nwhile True:\n    mx, my = pygame.mouse.get_pos()\n    for event in pygame.event.get(): \n        if event.type == pygame.QUIT:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "main_board",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "main_board = board(board_size[0], board_size[1], team)\nprint(main_board)\ndef draw(screen):\n    screen.fill('white')\n    draw_board(main_board, screen)\n    pygame.display.update()\nbest_move = -1\nwhile True:\n    mx, my = pygame.mouse.get_pos()\n    for event in pygame.event.get(): ",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "best_move",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "best_move = -1\nwhile True:\n    mx, my = pygame.mouse.get_pos()\n    for event in pygame.event.get(): \n        if event.type == pygame.QUIT:\n            exit()\n        elif event.type == pygame.MOUSEBUTTONDOWN:\n            if event.button == 1:\n                if main_board.player[main_board.turn]:\n                    main_board.player_click(mx, my, screen)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "start_screen",
        "kind": 6,
        "importPath": "start_window",
        "description": "start_window",
        "peekOfCode": "class start_screen:\n    def __init__(self, window_size):\n        self.max_width, self.max_height = window_size\n        self.font = pygame.font.SysFont('Arial', 25)\n        self.buttons = []\n        self.mode = [(1, 1), (0, 0), (1, 0), (0, 1)]\n    def draw_screen(self, screen):\n        self.addText(screen, (self.max_width // 2, self.max_height // 3), \"Chess game\")\n        self.addText(screen, (self.max_width // 4, (self.max_height * 3) // 5), \"Player vs. Player\")\n        self.addText(screen, (self.max_width // 2, (self.max_height * 3) // 5), \"Player vs. Bot\")",
        "detail": "start_window",
        "documentation": {}
    }
]